name : kernel-builder

on:
  workflow_dispatch:
  inputs:
  KERNEL_URL:
  description: 'Add Kernel URL'
  required: true
  default: 'https://github.com/Rem01Gaming/liquid_kernel_realme_even'
  
  KERNEL_BRANCH:
  description: 'KERNEL_BRANCH'
  required: true
  default: 'OSS-RUI2'
  
  LINK_GCC_AARCH64:
        description: 'LINK_GCC_AARCH64'
        required: true
        default: 'https://github.com/EternalX-project/aarch64-linux-gnu.git'
        
  LINK_GCC_ARM:
        description: 'LINK_GCC_ARM'
        required: true
        default: 'https://github.com/EternalX-project/arm-linux-gnueabi.git'
        
  LINK_CLANG:
        description: 'LINK_CLANG'
        required: true
        default: 'https://github.com/SayuZX/android_prebuilts_clang_host_linux-x86_clang-r437112.git'
        
  jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    steps:
    - name: Display Run Parameters
      run: |
      echo "::group::User Environment Variables"
      echo "Kernel URL: ${{ github.event.inputs.KERNEL_URL }}"
      echo "Kernel Branch: ${{ github.event.inputs.KERNEL_BRANCH }}"
      echo "Link gcc arrch64: ${{ github.event.inputs.LINK_GCC_AARCH64 }}"
      echo "Link gcc arm: ${{ github.event.inputs.LINK_GCC_ARM }}"
      echo "Kernel Branch: ${{ github.event.inputs.LINK_CLANG }}"
      echo "::endgroup::"
      
          # You might want to Checkout your repo first, but not mandatory
    - name: Check Out
      uses: actions/checkout@v3
    # Cleanup The Actions Workspace Using Custom Composite Run Actions
    - name: Cleanup
      uses: rokibhasansagar/slimhub_actions@main
      # That's it! Now use your normal steps

    - name: Prepare the environment
      run: |
      sudo apt update
      sudo apt -y upgrade
      sudo apt install nano bc bison ca-certificates curl flex gcc git libc6-dev libssl-dev openssl python-is-python3 ssh wget zip zstd sudo make clang gcc-arm-linux-gnueabi software-properties-common build-essential libarchive-tools gcc-aarch64-linux-gnu
      
     - name: Install OpenJDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '8' 
      
      - name: Setup SSH Keys
      if: ${{ startsWith(github.event.inputs.KERNEL_URL, 'git@github.com') }}
      uses: webfactory/ssh-agent@v0.5.4
      with:
      ssh-private-key: |
      ${{ secrets.SSH_PRIVATE_KEY }}
      
     - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
      swap-size-gb: 12
      
     - name: Building recovery
      run: |
      export ARCH=arm64
      export KBUILD_BUILD_USER="ismasrull"
      export LOCALVERSION="test-build"
      
      [ -d "out" ] && rm -rf out  mkdir -p out

          make O=out ARCH=arm64 even_defconfig
          PATH="${PWD}/clang/bin:${PATH}:${PWD}/aarch32-gcc/bin:${PATH}:${PWD}/aarch64-gcc/bin:${PATH}" \
          make -j$(nproc --all) O=out \
          ARCH=arm64 \
          CC="clang" \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE="${PWD}/aarch64-gcc/bin/aarch64-linux-gnu-" \
          CROSS_COMPILE_ARM32="${PWD}/aarch32-gcc/bin/arm-linux-gnueabihf-" \
          CONFIG_NO_ERROR_ON_MISMATCH=y \ 
          V=0 2>&1 | tee log.txt
          
          
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}
      
      

      

